server.port={{ application_port }}
server.connection-timeout=5000
server.tomcat.max-threads=2048
server.tomcat.min-spare-threads=20
server.tomcat.max-connections=15000
server.tomcat.accept-count=500


#spring data jpa for postgres
spring.datasource.url=jdbc:postgresql://{{ postgresql_host }}:{{ postgresql_port }}/sunbird
spring.datasource.username={{postgresql_username_sunbird }}
spring.datasource.password={{ postgresql_password_sunbird }}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=update

spring.data.cassandra.local-datacenter=DC1
spring.data.cassandra.startupTimeoutInSeconds=100000
spring.data.cassandra.contact-points={{ sunbird_cassandra_db_host }}
spring.data.cassandra.port=9042
spring.data.cassandra.keyspace-name={{ keyspace_sunbird }}
spring.data.cassandra.username={{ cassandra_username }}
spring.data.cassandra.password={{ cassandra_password }}

cassandra.config.host={{ sunbird_cassandra_db_host }}

playlist.redis.key.mapping={"ORG_FEATURED_COURSES":"orgID_Featured_Courses", "MDO_RECOMMENDED_PROGRAMS":"mdo_Recommended_Programs","MDO_RECOMMENDED_COURSES":"mdo_Recommended_courses","MDO_FEATURED_COURSES":"mdo_Featured_Courses"}

# 1 day in second  1 * 24 * 60 * 60
playlist.redis.ttl=86400
default.content.properties=name,identifier,competencies_v5,avgRating,primaryCategory,contentType,channel,organisation,createdFor,duration,creatorLogo,appIcon,posterImage,additionalTags,description,status,secureSettings
#content-service
content-service-host=http://content-service:9000/
content-read-endpoint=content/v4/admin/read
content-read-endpoint-fields=?fields=primaryCategory,identifier,batches,versionKey,additionalTags
redis.insights.index=12

spring.redis.host={{ kp_redis_ip }}
spring.redis.port=6379
spring.redis.cacheTtl=60000
elasticsearch.host={{ elasticsearch_host }}
elasticsearch.port={{ elasticsearch_http_port }}
elasticsearch.username={{ elasticsearch_username }}
elasticsearch.password={{ elasticsearch_password }}
elastic.required.field.json.path=/EsFieldsmapping/esRequiredFieldsJsonFilePath.json
search.result.redis.ttl=600

elastic.required.field.demand.json.path=/EsFieldsmapping/esRequiredFieldsJsonFilePath.json
elastic.required.field.content.json.path=/EsFieldsmapping/cpEsRequiredFieldsJsonFilePath.json
elastic.required.field.interest.json.path=/EsFieldsmapping/interestRequiredFieldsJsonFilePath.json
elastic.required.field.bookmark.json.path=/EsFieldsmapping/bookmarkEsRequiredFieldJsonFilePath.json

##learnerService
learner.service.url=http://learner-service:9000
sb.org.search.path=/v1/org/search
sb.api.key={{ bearer_token }}
bookmark.duplicate.not.allowed.category=MDO_ORG_LIST

sunbird.user.search.endpoint=/private/user/v1/search
lms.user.read.path=/private/user/v1/read/
 
#kafka Server
spring.kafka.bootstrap.servers={{ kafka_servers_list }}
#kafka properties
kakfa.offset.reset.value=latest
kafka.max.poll.interval.ms=15000
kafka.max.poll.records=100
kafka.auto.commit.interval.ms=10000
#kafka topics and group
kafka.topic.demand.request={{ env }}.demand.request
kafka.topic.demand.content.group=demand.request.group
 
#notification-Service
notify.service.host=http://notification-service:9000
notify.service.path.async=/v2/notification/send
notification.support.mail={{ notification_support_mail | default('support@igot-dev.in')}}
demand.request.notification.template=demandCreatetRequestTemplate

accesstoken.publickey.basepath=/keys/
sso.url=https://{{ domain_name }}/auth/
sso.realm={{ keycloak_sso_realm }}
sso.connection.pool.size=20
sso.enabled=true

elastic.required.field.cios.json.path=/EsFieldsmapping/contentEsRequiredFieldsJsonFilePath.json

sb.search.service.host=http://search-service:9000
sb.composite.v4.search=/v4/search
playlist_course_facets=courseCategory,primaryCategory

knowledge.mv.service=http://knowledge-mw-service:5000/
odcs.term.create=v1/framework/term/create
odcs.category.fields=identifier,code,name,description,refId,refType
odcs.framework.create=v1/framework/create
odcs.framework.read=v1/framework/read
odcs.designation.term.read=v1/framework/term/read
framework.copy=v1/framework/copy
framework.publish=v1/framework/publish
kafka.topic.framework.create={{env}}.framework.create
kafka.topic.framework.create.group=framework.create.group

cios.content.service.host=http://cios-content-service:7001
cios.content.service.update.api=/ciosIntegration/v1/update/content
cios.content.service.search.api=/ciosIntegration/v1/search/content
cornell.partner.code=CORNELL
upgrad.partner.code=UPGRAD
